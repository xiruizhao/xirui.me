[["index.html", "Xirui Zhao’s blog About", " Xirui Zhao’s blog Xirui Zhao 2021-12-30 About My personal blog, published with bookdown. There is no definite plan or organization yet. Github Linkedin "],["study-guides.html", "1 Study Guides", " 1 Study Guides Mostly textbooks I read. Computer Science Harvard’s CS50 Introduction to Computer Science. If you enjoyed it, you can consider a CS career and study it in college C: Kochan, S. (2014). Programming in C (4th ed.). Addison-Wesley Professional. C++: Stroustrup, B. (2022). A Tour of C++ (3rd ed.). Addison-Wesley Professional. Computer Architecture: Harris, S. &amp; Harris, D. (2015). Digital Design and Computer Architecture: ARM Edition. Morgan Kaufmann. Computer System Organization: Bryant, R. &amp; O’Hallaron, D. (2015). Computer Systems: A Programmer’s Perspective (3rd ed.). Pearson. Computer Networks: Kurose, J. &amp; Ross, K. (2021). Computer Networking: A Top-Down Approach (8th ed.). Pearson. Data Structures: Goodrich et al. (2013). Data Structures and Algorithms in Python. Wiley. Algorithms: Cormen et al. (2009). Introduction to Algorithms (3rd ed.). MIT Press. Operating Systems: Tanenbaum, A. &amp; Bos, H. (2015). Modern Operating Systems (4th ed.). Pearson. Git: Chacon, S. &amp; Straub, B. (2019). Pro Git (2nd ed.). Apress. https://git-scm.com/book/en/v2 Math Calculus: Spivak, M. (2006). Calculus (3rd ed.). Cambridge University Press. Linear Algebra: Lay et al. (2014). Linear Algebra and Its applications (5th ed.). Pearson. Probability &amp; Statistics: DeGroot, M.H. &amp; Schervish, M.J. (2011). Probability and Statistics (4th ed.). Pearson. Economics: Mankiw, N.G. (2017). Principles of Economics (8th ed.). Cengage Learning. Philosophy: https://plato.stanford.edu "],["political-philosophy.html", "2 Political Philosophy", " 2 Political Philosophy under construction "],["notes.html", "3 Notes 3.1 C notes 3.2 TCP socket programming notes 3.3 Git Notes 3.4 WebDav Server for Zotero Library", " 3 Notes 3.1 C notes char *: pointer to char char * const: const pointer to char const char *, char const *: pointer to const char const char * const: const pointer to const char 3.2 TCP socket programming notes epoll event: EPOLLHUP: the other end of a pipe called close(2); both direction of a TCP connection are closed (sent and received FIN?) EPOLLRDHUP: stream peer closed their writing connection (peer sent FIN) send(2) returns 0: stream peer closed their writing connection (peer sent FIN) errno: ECONNABORTED: TCP enters TCP_CLOSE due to RST, timeout or ICMP error during connect ECONNRESET: received RST while not in TCP_SYN_SENT (ECONNREFUSED) or TCP_CLOSE_WAIT (EPIPE) also EPIPE: send on a shutdown writing half 3.3 Git Notes Git version 2.28.0 3.3.1 Work In Progress 3.3.1.1 Inspect WIP git status shows the list of files with staged and unstaged changes and untracked files. git diff shows unstaged changes (worktree v index) git diff --staged show staged changes (index v HEAD) git diff @ shows unstaged and staged changes (worktree, index v HEAD). (@ is a shortcut for HEAD. See gitrevisions) &lt;pathspec&gt; add be added at the end, e.g., :/ stands for repository root. 3.3.1.2 Discard WIP git clean -f &lt;path&gt; removes untracked files git restore &lt;pathspec&gt; discards unstaged changes (working =&gt; index) alternatively, git checkout &lt;pathspec&gt; Undo git add: git restore --staged &lt;pathspec&gt; unstages staged changes (index =&gt; HEAD) or git rm --cached &lt;pathspec&gt; if a new file was added alternatively, git reset &lt;pathspec&gt;, git reset (the whole repository), git reset -p (interactively select chunks to unstage) git restore --source=HEAD --staged --worktree &lt;pathspec&gt; discards unstaged and staged changes (worktree, index =&gt; HEAD). Shorthand: git restore -s@ -SW &lt;pathspec&gt; alternatively, git checkout @ &lt;pathspec&gt; and git reset --hard (the whole repository). Note: git reset “resets current HEAD to the specified state” (and changes the worktree and the index accordingly) while git restore does not move HEAD. 3.3.1.3 Save and reapply WIP git stash stashes unstaged and staged changes (untracked files are excluded) to a stash stack git stash -u includes untracked files (excluding ignored files); git statsh -a includes even ignored files git stash -p is interactive git stash pop applies the most recent local stash (previously staged changes are restored as unstaged) and drops it from the stash stack git stash pop --index restores staged changes as staged git stash apply applies the most recent local stash but git stash drop drops the most recent local stash from the stash stack git stash list lists saved stashes git stash show n inspects n-th stash (0-th is the most recent one) git stash apply n applies the n-th stash from the stash stack git stash clear clears the stash stack 3.3.1.4 (Somewhat odd) alternative to git stash git worktree add -b hotfix ../hotfix cd ../hotfix # work on it ... git commit -m &quot;fix #xxx&quot; # change to previous worktree git reset --soft hotfix # WIP in current worktree untouched but HEAD updated git push git worktree remove ../hotfix 3.3.2 History 3.3.2.1 Inspect history git log --stat git log -p git log &lt;file&gt; 3.3.2.2 Rewrite history 3.3.2.2.1 Rewrite, undo and revert last commit git commit --amend replaces your last commit with a new commit. supply -m to change commit message or --no-edit to keep it unchanged git reset --hard @~ rolls HEAD back to the second last commit and restores the worktree and the index. git revert @ makes a new commit to revert the changes introduced in last commit. 3.3.2.2.2 Squash, split, and rewrite past commits git rebase --root -i. See Rewriting History of Pro Git. Squash all commits: git reset $(git commit-tree @^{tree} -m \"Squash all commits\") creates a new commit out of the tree object corresponding to HEAD and resets HEAD to it (source: StackOverflow). Note that some unreachable past commits are still available in your local reflog and unreachable objects are available in your local object database, which will expire by default. Reflogs and unreachable objects are not transfered by git push. 3.3.3 Working with long histories git clone --depth 1 &lt;repos&gt; git fetch origin &lt;remote_branch&gt;:&lt;local_branch&gt; git clone --depth 1 --no-single-branch &lt;repos&gt; (equivalent to 1. and git fetch --depth 1 origin 'refs/heads/*:refs/remotes/origin/*') git fetch --deepen 1 3.4 WebDav Server for Zotero Library 2021-01-21 Motivation: Zotero Library’s free space is only 300MB. Caveat: Group Library is not supported. 3.4.1 Prerequisitives server with publicly accessible IP domain name 3.4.2 Steps Install vanilla caddy per https://caddyserver.com/docs/install#debian-ubuntu-raspbian, which contains systemd service files Install caddy compiled with webdav module. You can customize included modules at https://caddyserver.com/download. Unfortunately, this step has to be repeated whenever caddy is upgraded. curl -o /tmp/caddy &#39;https://caddyserver.com/api/download?os=linux&amp;arch=amd64&amp;p=github.com%2Fmholt%2Fcaddy-webdav&#39; sudo install -o root -m 755 /tmp/caddy /usr/bin/caddy Generate password for HTTP Basic Authentication caddy hash-password &gt; passwd_hash # input your passwd on stdin sudo mkdir -p /var/www/zotero Put in /etc/caddy/Caddyfile: example.com { basicauth { # username passwd_hash zotero xxxx } root /zotero/* /var/www webdav /zotero/* } Reload caddy config sudo systemctl reload caddy 3.4.3 Testing cadaver is a command-line WebDav client, suitable for testing: cadaver https://example.com/zotero/ 3.4.4 Other clients compatible with Zotero Library Papership has macOS and iOS apps that can sync with Zotero and personal WebDav servers. You should run sudo touch /var/www/zotero/lastsync.txt on the WebDav server on first use. "],["retirement-math.html", "4 Retirement Math 4.1 A lump sum for fixed retirement expense 4.2 Fixed contribution for a lump sum 4.3 Saving ratio assuming fixed expense throughout working and retirement", " 4 Retirement Math 4.1 A lump sum for fixed retirement expense Suppose you plan to deposit a lump sum to an interest-bearing account for retirement expenses, how much do you need to save? Let the real interest rate (monthly) be \\(r\\) (inflation-adjusted) and assume the interest payments are made monthly and are tax-free. Let your life expectancy minus retirement age be \\(live\\) months. Let your inflation-adjusted monthly expense be \\(expense\\). Let your monthly balance be \\(balance(n)\\) where \\(balance(0)\\) is the beginning balance (i.e., what we are trying to figure out) and \\(balance(live)\\) at your death should be 0 (assume you leave nothing for your children). We have \\[balance(n) = (1+r)balance(n-1) - expense\\] It’s a first order inhomogeneous linear difference equation and its solution is given by \\[balance(n)=\\frac{expense}{r}\\left[1-(1+r)^{n-live}\\right]\\] (an exponential decay function of \\(n\\)). Suppose \\(r = \\frac{0.03}{12} = 0.0025\\) (\\(1.0025^{12}=1.030416\\), so slightly larger than a 3% annual percentage yield), \\(live = (85 - 67)\\times12 = 216\\) (US life expectancy in 2021 was 76, full retirement age for Social Security is 67 for people born after 1960), \\(expense = 4345\\) (https://www.retireguide.com/retirement-planning/average-spending/), then \\(balance(0)=\\frac{4345}{0.0025}(1-(1.0025)^{-216})=724,500\\). The interest payments saved you \\(216\\times4345-724500=214020\\), i.e. 22.8% over 19 years. 4.1.1 Interest rate and saving Let’s consider how changes in the interest rate affect the amount of the lump sum saving \\[balance(0)=\\frac{expense}{r}\\left[1-(1+r)^{-live}\\right]\\] As \\(r\\) increases, \\(\\frac{expense}{r}\\) decreases, \\((1+r)^{-live}\\) decreases (because \\(-live &lt; 0\\)), \\(\\left[1-(1+r)^{-live}\\right]\\) increases, so the effect of increase in \\(r\\) appears ambiguous when common sense tells us you can save less. To mathematically resolve this question, we turn to the partial derivative: \\[\\frac{\\partial balance(0)}{\\partial r}=\\frac{expense}{r^2}\\left[(live\\cdot r+r+1)(1+r)^{-live-1}-1\\right]\\] If \\(\\frac{\\partial balance(0)}{\\partial r} &lt; 0\\) holds for any reasonable \\(r, expense,\\text{ and } live\\), then an increase in \\(r\\) results in a decrease in \\(balance(0)\\), meaning we need to save less. Because \\(\\frac{expense}{r^2}&gt;0\\), we only need to consider the sign of \\(\\left[(live\\cdot r+r+1)(1+r)^{-live-1}-1\\right]\\). Since \\[\\left[(live\\cdot r+r+1)(1+r)^{-live-1}-1\\right]\\biggr|_{r=0}=0\\] and \\[\\frac{\\partial\\left[(live\\cdot r+r+1)(1+r)^{-live-1}-1\\right]}{\\partial r}=-live(live+1)r(1+r)^{-live-2}&lt;0\\text{ for }r, live&gt;0\\] we have \\[\\left[(live\\cdot r+r+1)(1+r)^{-live-1}-1\\right]&lt;0 \\text{ for } r&gt;0\\] which leads us to conclude that \\(\\frac{\\partial balance(0)}{\\partial r}&lt;0 \\text{ for } r&gt;0\\). Therefore, a higher interest rate decreases \\(balance(0)\\), i.e., requiring us to save less for retirement. 4.2 Fixed contribution for a lump sum How much should you save every month to an interest-bearing account for the lump sum above? Let your monthly contribution be \\(contrib\\), the real interest rate (monthly) \\(r\\), and the contribution period be \\(work\\) months. We could solve a difference equation as above or take advantage of a known summation formula \\(\\sum_{i=0}^nx^i=\\frac{x^{n+1}-1}{x-1}\\). Your accumulated contributions with compounded interests at the end is given by \\[balance=\\sum_{i=1}^{work}contrib(1+r)^{work-i}=contrib\\sum_{i=0}^{work-1}(1+r)^{i}=\\frac{contrib}{r}\\left[(1+r)^{work}-1\\right]\\] Suppose \\(r=0.0025, work=(67-25)\\times12=504\\) and desired \\(balance=724,500\\), then \\(contrib=\\frac{r}{(1+r)^{work}-1}balance=719\\). The interests saved you \\(\\frac{724500-719\\times504}{724500}=\\) 50%. 4.3 Saving ratio assuming fixed expense throughout working and retirement Combining the previous two sections: \\[\\frac{contrib}{r}\\left[(1+r)^{work}-1\\right]=\\frac{expense}{r}\\left[1-(1+r)^{-live}\\right]\\] \\[\\implies\\frac{contrib}{contrib+expense}=\\frac{(1+r)^{live}-1}{(1+r)^{work+live}-1}\\] At \\(work=504, live=216, r=0.0025\\), we have \\(\\frac{contrib}{contrib + expense}=0.142\\) i.e. a 14.2% saving ratio during working. A higher interest rate requires less saving. Without interests, you need to save \\(\\frac{216}{504+216}=\\) 17.7%. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
